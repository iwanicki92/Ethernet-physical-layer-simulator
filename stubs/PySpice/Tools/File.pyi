from _typeshed import Incomplete
from collections.abc import Generator

def file_name_has_extension(file_name, extension): ...
def file_extension(filename): ...
def run_shasum(filename, algorithm: int = ..., text: bool = ..., binary: bool = ..., portable: bool = ...): ...

class Path:
    def __init__(self, path) -> None: ...
    def __bool__(self) -> bool: ...
    @property
    def path(self): ...
    def is_absolut(self): ...
    def absolut(self): ...
    def normalise(self): ...
    def normalise_case(self): ...
    def expand_vars_and_user(self): ...
    def real_path(self): ...
    def relative_to(self, directory): ...
    def clone_for_path(self, path): ...
    def split(self): ...
    def directory_part(self): ...
    def filename_part(self): ...
    def is_directory(self): ...
    def is_file(self): ...
    @property
    def inode(self): ...
    @property
    def creation_time(self): ...

class Directory(Path):
    def __bool__(self) -> bool: ...
    def join_directory(self, directory): ...
    def join_filename(self, filename): ...
    def iter_file(self, followlinks: bool = ...) -> Generator[Incomplete, None, None]: ...
    def iter_directories(self, followlinks: bool = ...) -> Generator[Incomplete, None, None]: ...

class File(Path):
    default_shasum_algorithm: int
    def __init__(self, filename, path: str = ...) -> None: ...
    def __bool__(self) -> bool: ...
    @property
    def directory(self): ...
    @property
    def filename(self): ...
    @property
    def extension(self): ...
    @property
    def shasum(self): ...
    def compute_shasum(self, algorithm: Incomplete | None = ...): ...
