from .Ast import *
from _typeshed import Incomplete

class Parser:
    reserved: Incomplete
    tokens: Incomplete
    def t_error(self, token) -> None: ...
    t_ignore: str
    def t_newline(self, t) -> None: ...
    t_ignore_COMMENT: str
    t_SEMICOLON: str
    t_LEFT_PARENTHESIS: str
    t_RIGHT_PARENTHESIS: str
    t_SET: str
    t_NOT: str
    t_POWER: str
    t_MULTIPLY: str
    t_DIVIDE: str
    t_MODULO: str
    t_INT_DIVIDE: str
    t_PLUS: str
    t_MINUS: str
    t_EQUAL: str
    t_NOT_EQUAL: str
    t_LESS: str
    t_GREATER: str
    t_LESS_EQUAL: str
    t_GREATER_EQUAL: str
    t_AND: str
    t_OR: str
    t_IF: str
    t_COLON: str
    def t_NAME(self, t): ...
    def t_NUMBER(self, t): ...
    precedence: Incomplete
    def p_error(self, p) -> None: ...
    start: str
    def p_statement(self, t) -> None: ...
    def p_variable(self, p) -> None: ...
    def p_float(self, p) -> None: ...
    def p_value(self, p) -> None: ...
    def p_unnary_operation(self, p) -> None: ...
    def p_binary_operation(self, p) -> None: ...
    def p_if(self, p) -> None: ...
    def __init__(self) -> None: ...
    def parse(self, text) -> None: ...
    def test_lexer(self, text) -> None: ...
