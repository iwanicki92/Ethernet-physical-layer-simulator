from typing import Any, Literal, overload

from .Xyce.Simulation import XyceCircuitSimulator
from .NgSpice.Simulation import NgSpiceSubprocessCircuitSimulator, NgSpiceSharedCircuitSimulator
from ..Tools.StringTools import join_dict as join_dict, join_lines as join_lines, join_list as join_list
from .ElementParameter import FlagParameter as FlagParameter, KeyValueParameter as KeyValueParameter, ParameterDescriptor as ParameterDescriptor, PositionalElementParameter as PositionalElementParameter
from .Simulation import CircuitSimulator as CircuitSimulator
from _typeshed import Incomplete
from collections.abc import Generator

class DeviceModel:
    def __init__(self, name, modele_type, **parameters) -> None: ...
    def clone(self): ...
    @property
    def name(self): ...
    @property
    def model_type(self): ...
    @property
    def parameters(self): ...
    def __getitem__(self, name): ...
    def __getattr__(self, name): ...

class PinDefinition:
    def __init__(self, position, name: Incomplete | None = ..., alias: Incomplete | None = ..., optional: bool = ...) -> None: ...
    def clone(self): ...
    @property
    def position(self): ...
    @property
    def name(self): ...
    @property
    def alias(self): ...
    @property
    def optional(self): ...

class OptionalPin:
    def __init__(self, name) -> None: ...
    @property
    def name(self): ...

class Pin(PinDefinition):
    def __init__(self, element, pin_definition, node) -> None: ...
    @property
    def element(self): ...
    @property
    def node(self): ...
    def disconnect(self) -> None: ...
    def add_current_probe(self, circuit) -> None: ...

class ElementParameterMetaClass(type):
    def __new__(meta_cls, class_name, base_classes, namespace): ...
    def __init__(meta_cls, class_name, base_classes, namespace) -> None: ...
    @property
    def number_of_pins(cls): ...
    @property
    def number_of_positional_parameters(cls): ...
    @property
    def positional_parameters(cls): ...
    @property
    def optional_parameters(cls): ...
    @property
    def parameters_from_args(cls): ...
    @property
    def spice_to_parameters(cls): ...

class Element(metaclass=ElementParameterMetaClass):
    PINS: Incomplete
    PREFIX: Incomplete
    raw_spice: str
    enabled: bool
    def __init__(self, netlist, name, *args, **kwargs) -> None: ...
    def has_parameter(self, name): ...
    def copy_to(self, element) -> None: ...
    @property
    def netlist(self): ...
    @property
    def name(self): ...
    @property
    def pins(self): ...
    def detach(self): ...
    @property
    def nodes(self): ...
    @property
    def node_names(self): ...
    def __setattr__(self, name, value) -> None: ...
    def __getattr__(self, name): ...
    def format_node_names(self): ...
    def parameter_iterator(self) -> Generator[Incomplete, None, None]: ...
    def format_spice_parameters(self): ...

class AnyPinElement(Element):
    PINS: Incomplete
    def copy_to(self, netlist): ...

class FixedPinElement(Element):
    def __init__(self, netlist, name, *args, **kwargs) -> None: ...
    def copy_to(self, netlist): ...

class NPinElement(Element):
    PINS: str
    def __init__(self, netlist, name, nodes, *args, **kwargs) -> None: ...
    def copy_to(self, netlist): ...

class Node:
    def __init__(self, netlist, name) -> None: ...
    @property
    def netlist(self): ...
    @property
    def name(self): ...
    @property
    def pins(self): ...
    @property
    def is_ground_node(self): ...
    def __bool__(self) -> bool: ...
    def __iter__(self): ...
    def connect(self, pin) -> None: ...
    def disconnect(self, pin) -> None: ...

class Netlist:
    raw_spice: str
    def __init__(self) -> None: ...
    def copy_to(self, netlist): ...
    @property
    def gnd(self): ...
    @property
    def nodes(self): ...
    @property
    def node_names(self): ...
    @property
    def elements(self): ...
    @property
    def element_names(self): ...
    @property
    def models(self): ...
    @property
    def model_names(self): ...
    @property
    def subcircuits(self): ...
    @property
    def subcircuit_names(self): ...
    def element(self, name): ...
    def node(self, name): ...
    def __getitem__(self, attribute_name): ...
    def __getattr__(self, attribute_name): ...
    def get_node(self, node, create: bool = ...): ...
    def has_ground_node(self): ...
    def model(self, name, modele_type, **parameters): ...
    def subcircuit(self, subcircuit) -> None: ...

class SubCircuit(Netlist):
    def __init__(self, name, *nodes, **kwargs) -> None: ...
    def clone(self, name: Incomplete | None = ...) -> None: ...
    @property
    def name(self): ...
    @property
    def external_nodes(self): ...
    @property
    def parameters(self): ...
    def check_nodes(self) -> None: ...

class SubCircuitFactory(SubCircuit):
    NAME: Incomplete
    NODES: Incomplete
    def __init__(self, **kwargs) -> None: ...

class Circuit(Netlist):
    title: Incomplete
    def __init__(self, title, ground: int = ..., global_nodes=...) -> None: ...
    def clone(self, title: Incomplete | None = ...): ...
    def include(self, path) -> None: ...
    def lib(self, name, section: Incomplete | None = ...) -> None: ...
    def parameter(self, name, expression) -> None: ...
    def str(self, simulator: Incomplete | None = ...): ...
    def str_end(self): ...
    @overload
    def simulator(self, *args, simulator: Literal["ngspice-shared"], **kwargs) -> NgSpiceSharedCircuitSimulator: ...
    @overload
    def simulator(self, *args, simulator: Literal["ngspice-subprocess"], **kwargs) -> NgSpiceSubprocessCircuitSimulator: ...
    @overload
    def simulator(self, *args, simulator: Literal["xyce-serial", "xyce-parallel"], **kwargs) -> XyceCircuitSimulator: ...
