from .BasicElement import SubCircuitElement as SubCircuitElement
from .ElementParameter import FlagParameter as FlagParameter
from .Netlist import Circuit as Circuit, ElementParameterMetaClass as ElementParameterMetaClass, SubCircuit as SubCircuit
from _typeshed import Incomplete

class ParseError(NameError): ...

class PrefixData:
    prefix: Incomplete
    classes: Incomplete
    number_of_positionals_min: Incomplete
    number_of_positionals_max: Incomplete
    has_optionals: Incomplete
    multi_devices: Incomplete
    has_variable_number_of_pins: Incomplete
    number_of_pins: Incomplete
    has_flag: bool
    def __init__(self, prefix, classes) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    @property
    def single(self): ...

prefix_data: Incomplete

class Statement:
    def __init__(self, line, statement: Incomplete | None = ...) -> None: ...
    def value_to_python(self, x): ...
    def values_to_python(self, values): ...
    def kwargs_to_python(self, kwargs): ...
    def join_args(self, args): ...

class Comment(Statement): ...

class Title(Statement):
    def __init__(self, line) -> None: ...

class Lib(Statement):
    def __init__(self, line) -> None: ...
    def to_python(self, netlist_name): ...

class Include(Statement):
    def __init__(self, line) -> None: ...
    def to_python(self, netlist_name): ...

class Model(Statement):
    def __init__(self, line) -> None: ...
    @property
    def name(self): ...
    def to_python(self, netlist_name): ...
    def build(self, circuit) -> None: ...

class SubCircuitStatement(Statement):
    def __init__(self, line) -> None: ...
    @property
    def name(self): ...
    @property
    def nodes(self): ...
    def __iter__(self): ...
    def append(self, statement) -> None: ...
    def to_python(self, ground: int = ...): ...
    def build(self, ground: int = ...): ...

class Element(Statement):
    factory: Incomplete
    def __init__(self, line) -> None: ...
    @property
    def name(self): ...
    def translate_ground_node(self, ground): ...
    def to_python(self, netlist_name, ground: int = ...): ...
    def build(self, circuit, ground: int = ...) -> None: ...

class Line:
    def __init__(self, line, line_range, end_of_line_comment) -> None: ...
    @property
    def comment(self): ...
    @property
    def is_comment(self): ...
    def append(self, line) -> None: ...
    def lower_case_statement(self, statement) -> None: ...
    def right_of(self, text): ...
    def read_words(self, start_location, number_of_words): ...
    def split_words(self, start_location, until: Incomplete | None = ...): ...
    @staticmethod
    def get_kwarg(text): ...
    def split_line(self, keyword): ...

class SpiceParser:
    def __init__(self, path: Incomplete | None = ..., source: Incomplete | None = ..., end_of_line_comment=..., recurse: bool = ..., section: Incomplete | None = ...) -> None: ...
    def is_only_subcircuit(self): ...
    def is_only_model(self): ...
    def build_circuit(self, ground: int = ...): ...
    @staticmethod
    def netlist_to_python(netlist_name, statements, ground: int = ...): ...
    def to_python_code(self, ground: int = ...): ...
