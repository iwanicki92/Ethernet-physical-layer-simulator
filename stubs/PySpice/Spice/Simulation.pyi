from ..Probe.WaveForm import TransientAnalysis
from ..Config import ConfigInstall as ConfigInstall
from ..Tools.StringTools import join_dict as join_dict, join_list as join_list, str_spice as str_spice
from ..Unit import Unit as Unit, as_A as as_A, as_Degree as as_Degree, as_Hz as as_Hz, as_V as as_V, as_s as as_s, u_Degree as u_Degree
from _typeshed import Incomplete

class AnalysisParameters:
    ANALYSIS_NAME: Incomplete
    @property
    def analysis_name(self): ...
    def to_list(self): ...

class OperatingPointAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str

class DcSensitivityAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, output_variable) -> None: ...
    @property
    def output_variable(self): ...
    def to_list(self): ...

class AcSensitivityAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, output_variable, variation, number_of_points, start_frequency, stop_frequency) -> None: ...
    @property
    def output_variable(self): ...
    @property
    def variation(self): ...
    @property
    def number_of_points(self): ...
    @property
    def start_frequency(self): ...
    @property
    def stop_frequency(self): ...
    def to_list(self): ...

class DCAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, **kwargs) -> None: ...
    @property
    def parameters(self): ...
    def to_list(self): ...

class ACAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, variation, number_of_points, start_frequency, stop_frequency) -> None: ...
    @property
    def variation(self): ...
    @property
    def number_of_points(self): ...
    @property
    def start_frequency(self): ...
    @property
    def stop_frequency(self): ...
    def to_list(self): ...

class TransientAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, step_time, end_time, start_time: int = ..., max_time: Incomplete | None = ..., use_initial_condition: bool = ...) -> None: ...
    @property
    def step_time(self): ...
    @property
    def end_time(self): ...
    @property
    def start_time(self): ...
    @property
    def max_time(self): ...
    @property
    def use_initial_condition(self): ...
    def to_list(self): ...

class MeasureParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, analysis_type, name, *args) -> None: ...
    @property
    def parameters(self): ...
    def to_list(self): ...

class PoleZeroAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, node1, node2, node3, node4, tf_type, pz_type) -> None: ...
    @property
    def node1(self): ...
    @property
    def node2(self): ...
    def node3(self): ...
    @property
    def node4(self): ...
    @property
    def tf_type(self): ...
    @property
    def pz_type(self): ...
    def to_list(self): ...

class NoiseAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, output, src, variation, points, start_frequency, stop_frequency, points_per_summary) -> None: ...
    @property
    def output(self): ...
    @property
    def src(self): ...
    @property
    def variation(self): ...
    @property
    def points(self): ...
    @property
    def start_frequency(self): ...
    @property
    def stop_frequency(self): ...
    @property
    def points_per_summary(self): ...
    def to_list(self): ...

class DistortionAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, variation, points, start_frequency, stop_frequency, f2overf1) -> None: ...
    @property
    def variation(self): ...
    @property
    def points(self): ...
    @property
    def start_frequency(self): ...
    @property
    def stop_frequency(self): ...
    @property
    def f2overf1(self): ...
    def to_list(self): ...

class TransferFunctionAnalysisParameters(AnalysisParameters):
    ANALYSIS_NAME: str
    def __init__(self, outvar, insrc) -> None: ...
    @property
    def outvar(self): ...
    @property
    def insrc(self): ...
    def to_list(self): ...

class CircuitSimulation:
    def __init__(self, circuit, **kwargs) -> None: ...
    @property
    def circuit(self): ...
    def options(self, *args, **kwargs) -> None: ...
    @property
    def temperature(self): ...
    @property
    def nominal_temperature(self): ...
    def initial_condition(self, **kwargs) -> None: ...
    def node_set(self, **kwargs) -> None: ...
    def save(self, *args) -> None: ...
    def save_internal_parameters(self, *args) -> None: ...
    @property
    def save_currents(self): ...
    def reset_analysis(self) -> None: ...
    def analysis_iter(self): ...
    def operating_point(self) -> None: ...
    def dc_sensitivity(self, output_variable) -> None: ...
    def ac_sensitivity(self, output_variable, variation, number_of_points, start_frequency, stop_frequency) -> None: ...
    def dc(self, **kwargs) -> None: ...
    def ac(self, variation, number_of_points, start_frequency, stop_frequency) -> None: ...
    def measure(self, analysis_type, name, *args) -> None: ...
    def transient(self, step_time, end_time, start_time: int = ..., max_time: Incomplete | None = ..., use_initial_condition: bool = ...) -> None: ...
    def polezero(self, node1, node2, node3, node4, tf_type, pz_type) -> None: ...
    def noise(self, output_node, ref_node, src, variation, points, start_frequency, stop_frequency, points_per_summary: Incomplete | None = ...) -> None: ...
    def transfer_function(self, outvar, insrc) -> None: ...
    def distortion(self, variation, points, start_frequency, stop_frequency, f2overf1: Incomplete | None = ...) -> None: ...
    def str_options(self, unit: bool = ...): ...

class CircuitSimulator(CircuitSimulation):
    DEFAULT_SIMULATOR: str
    @classmethod
    def factory(cls, circuit, *args, **kwargs): ...
    def operating_point(self, *args, **kwargs): ...
    def dc(self, *args, **kwargs): ...
    def dc_sensitivity(self, *args, **kwargs): ...
    def ac(self, *args, **kwargs): ...
    def transient(self, *args, **kwargs) -> TransientAnalysis: ... # type: ignore[override]
    def polezero(self, *args, **kwargs): ...
    def noise(self, *args, **kwargs): ...
    def distortion(self, *args, **kwargs): ...
    def transfer_function(self, *args, **kwargs): ...
    tf = transfer_function
