from _typeshed import Incomplete

class NgSpiceCircuitError(NameError): ...
class NgSpiceCommandError(NameError): ...

class Vector:
    def __init__(self, ngspice_shared, name, type_, data) -> None: ...
    @property
    def is_interval_parameter(self): ...
    @property
    def is_voltage_node(self): ...
    @property
    def is_branch_current(self): ...
    @property
    def simplified_name(self): ...
    def to_waveform(self, abscissa: Incomplete | None = ..., to_real: bool = ..., to_float: bool = ...): ...

class Plot(dict):
    plot_name: Incomplete
    def __init__(self, simulation, plot_name) -> None: ...
    def nodes(self, to_float: bool = ..., abscissa: Incomplete | None = ...): ...
    def branches(self, to_float: bool = ..., abscissa: Incomplete | None = ...): ...
    def internal_parameters(self, to_float: bool = ..., abscissa: Incomplete | None = ...): ...
    def elements(self, abscissa: Incomplete | None = ...): ...
    def to_analysis(self): ...

class NgSpiceShared:
    NGSPICE_PATH: Incomplete
    LIBRARY_PATH: Incomplete
    MAX_COMMAND_LENGTH: int
    NUMBER_OF_EXEC_CALLS_TO_RELEASE_MEMORY: int
    @classmethod
    def setup_platform(cls) -> None: ...
    @classmethod
    def new_instance(cls, ngspice_id: int = ..., send_data: bool = ..., verbose: bool = ...): ...
    def __init__(self, ngspice_id: int = ..., send_data: bool = ..., verbose: bool = ...) -> None: ...
    @property
    def spinit_not_found(self): ...
    @property
    def library_path(self): ...
    def send_char(self, message, ngspice_id): ...
    def send_stat(self, message, ngspice_id): ...
    def send_data(self, actual_vector_values, number_of_vectors, ngspice_id): ...
    def send_init_data(self, data, ngspice_id): ...
    def get_vsrc_data(self, voltage, time, node, ngspice_id): ...
    def get_isrc_data(self, current, time, node, ngspice_id): ...
    @property
    def is_running(self): ...
    def clear_output(self) -> None: ...
    @property
    def stdout(self): ...
    @property
    def stderr(self): ...
    def exec_command(self, command, join_lines: bool = ...): ...
    @property
    def ngspice_version(self): ...
    @property
    def has_xspice(self): ...
    @property
    def has_cider(self): ...
    @property
    def simulation_type(self): ...
    def type_to_unit(self, vector_type): ...
    def alter_device(self, device, **kwargs) -> None: ...
    def alter_model(self, model, **kwargs) -> None: ...
    def delete(self, debug_number) -> None: ...
    def destroy(self, plot_name: str = ...) -> None: ...
    def device_help(self, device): ...
    def save(self, vector) -> None: ...
    def show(self, device): ...
    def showmod(self, device): ...
    def source(self, file_path) -> None: ...
    def option(self, **kwargs) -> None: ...
    def quit(self): ...
    def remove_circuit(self) -> None: ...
    def reset(self) -> None: ...
    def ressource_usage(self, *ressources): ...
    def set(self, *args, **kwargs) -> None: ...
    def set_circuit(self, name) -> None: ...
    def status(self): ...
    def step(self, number_of_steps: Incomplete | None = ...) -> None: ...
    def stop(self, *args, **kwargs) -> None: ...
    def trace(self, *args) -> None: ...
    def unset(self, *args) -> None: ...
    def where(self): ...
    def load_circuit(self, circuit) -> None: ...
    def listing(self): ...
    def run(self, background: bool = ...) -> None: ...
    def halt(self) -> None: ...
    def resume(self, background: bool = ...) -> None: ...
    @property
    def plot_names(self): ...
    @property
    def last_plot(self): ...
    def plot(self, simulation, plot_name): ...
