from PySpice.Unit.Unit import UnitValues as UnitValues
from _typeshed import Incomplete

class WaveForm(UnitValues):
    @classmethod
    def from_unit_values(cls, name, array, title: Incomplete | None = ..., abscissa: Incomplete | None = ...): ...
    @classmethod
    def from_array(cls, name, array, title: Incomplete | None = ..., abscissa: Incomplete | None = ...): ...
    def __new__(cls, name, prefixed_unit, shape, dtype=..., buffer: Incomplete | None = ..., offset: int = ..., strides: Incomplete | None = ..., order: Incomplete | None = ..., title: Incomplete | None = ..., abscissa: Incomplete | None = ...): ...
    def __array_finalize__(self, obj) -> None: ...
    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs): ...
    @property
    def name(self): ...
    @property
    def abscissa(self): ...
    @property
    def title(self): ...
    def str_data(self): ...

class Analysis:
    def __init__(self, simulation, nodes=..., branches=..., elements=..., internal_parameters=...) -> None: ...
    @property
    def simulation(self): ...
    @property
    def nodes(self): ...
    @property
    def branches(self): ...
    @property
    def elements(self): ...
    @property
    def internal_parameters(self): ...
    def __getitem__(self, name): ...
    def __getattr__(self, name): ...

class OperatingPoint(Analysis): ...

class SensitivityAnalysis(Analysis):
    def __init__(self, simulation, elements, internal_parameters) -> None: ...

class DcAnalysis(Analysis):
    def __init__(self, simulation, sweep, nodes, branches, internal_parameters) -> None: ...
    @property
    def sweep(self): ...

class AcAnalysis(Analysis):
    def __init__(self, simulation, frequency, nodes, branches, internal_parameters) -> None: ...
    @property
    def frequency(self): ...

class TransientAnalysis(Analysis):
    _time: WaveForm = ...
    def __init__(self, simulation, time, nodes, branches, internal_parameters) -> None: ...
    @property
    def time(self) -> WaveForm: ...

class PoleZeroAnalysis(Analysis):
    def __init__(self, simulation, nodes, branches, internal_parameters) -> None: ...

class NoiseAnalysis(Analysis):
    def __init__(self, simulation, nodes, branches, internal_parameters) -> None: ...

class DistortionAnalysis(Analysis):
    def __init__(self, simulation, frequency, nodes, branches, internal_parameters) -> None: ...
    @property
    def frequency(self): ...

class TransferFunctionAnalysis(Analysis):
    def __init__(self, simulation, nodes, branches, internal_parameters) -> None: ...
